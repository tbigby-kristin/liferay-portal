definition {

	macro anonymizeDataViaReviewData {
		var key_application = "${application}";

		if (isSet(application)) {
			Click(
				key_applications = "${application}",
				locator1 = "DataErasure#REVIEW_DATA_APPLICATION_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Anonymize");

			AssertConfirm(value1 = "Are you sure you want to anonymize the entities of this application?");

		}

		if (isSet(allApplications)) {

			PortletEntry.selectAll();

			Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Anonymize");

			AssertConfirm(value1 = "Are you sure you want to anonymize the selected items?");

			var key_text = "Anonymize";

			AssertClickNoError(
				locator1 = "Button#ANY",
				value1 = "Anonymize");

			AssertConfirm.assertConfirmationNoError(value1 = "Are you sure you want to anonymize the user's personal data?");

			AssertConfirm.assertConfirmationNoError(value1 = "All personal data associated to this user's applications has been deleted or anonymized. The user can now be deleted. Click OK to delete the user.");
		}

		Alert.viewSuccessMessage();

	}

	macro deleteEntryCP {
		if (isSet(rowEntry)) {
			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Delete",
				rowEntry = "${rowEntry}");

			AssertConfirm(value1 = "Are you sure you want to delete this entity?");
		}
		else {
			PortletEntry.selectAll();

			Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete the selected items?");
		}

		Alert.viewSuccessMessage();
	}

	macro editEntryCP {
		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Edit",
			rowEntry = "${rowEntry}");

		AssertElementPresent(
			key_portlet = "${applications}",
			locator1 = "ProductMenu#PORTLET_ACTIVE");
	}

	macro filterByApplications {
		Click.clickNoWaitForVisible(
			key_applications = "${applications}",
			locator1 = "DataErasure#REVIEW_DATA_APPLICATIONS_SELECT");

		AssertElementPresent(
			key_applications = "${applications}",
			locator1 = "DataErasure#REVIEW_DATA_APPLICATIONS_SELECTED");

		AssertTextEquals.assertPartialText(
			key_applications = "${applications}",
			locator1 = "DataErasure#APPLICATIONS_COUNT",
			value1 = "${applications} (${itemsCount})");

		AssertTextEquals.assertPartialText(
			key_itemsCount = "${itemsCount}",
			locator1 = "DataErasure#REMAINING_ITEMS_COUNT",
			value1 = "Remaining Items: ${itemsCount}");
	}

	macro filterByScope {
		Click.clickNoWaitForVisible(
			key_scope = "${scope}",
			locator1 = "DataErasure#REVIEW_DATA_SCOPE_SELECT");

		AssertElementPresent(
			key_scope = "${scope}",
			locator1 = "DataErasure#REVIEW_DATA_SCOPE_SELECTED");
	}

	macro viewEntryRowInApplicationCP {
		for (var tableEntryPartialText : list "${tableEntryPartialTextList}") {
			LexiconTable.viewTableEntryPartialText(
				tableEntry = "${tableEntry}",
				tableEntryPartialText = "${tableEntryPartialText}");
		}
	}

	macro viewNoEntryInApplicationCP {
		if (IsElementNotPresent(locator1 = "NavTab#ACTIVE_TAB_LINK", key_tab = "Review Data")) {
			Navigator.gotoNavTab(navTab = "Review Data");
		}

		AssertTextEquals.assertPartialText(
			key_applications = "${applications}",
			locator1 = "DataErasure#APPLICATIONS_COUNT",
			value1 = "${applications} (0)");

		AssertTextEquals.assertPartialText(
			key_itemsCount = "0",
			locator1 = "DataErasure#REMAINING_ITEMS_COUNT",
			value1 = "Remaining Items: 0");

		Portlet.viewEmptyMessage(message = "All data that requires review has been anonymized.");
	}

}