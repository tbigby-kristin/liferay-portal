@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-99377. User can change checkbox fragment configuration."
	@priority = "5"
	test AddCheckboxConfigurationFragmentToContentPage {
		property portal.acceptance = "true";

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Checkbox Fragment Example");
		}

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Checkbox Fragment Example");

		PageEditorConfiguration.checkConfigCheckbox(
			checkboxName = "Hide Body",
			fragmentName = "Checkbox Fragment Example");

		PageEditorConfiguration.checkConfigCheckbox(
			checkboxName = "Make Bold",
			fragmentName = "Checkbox Fragment Example");

		PageEditor.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		task ("Assert body text is hidden") {
			AssertElementNotPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//h3[contains(.,'Body Present!!')]");
		}

		task ("Assert text is bolded") {
			AssertElementPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//b[contains(.,'Bold Words')]");
		}
	}

	@description = "This is a test for LPS-99543. User can change text fragment configuration."
	@priority = "5"
	test AddTextConfigurationFragmentToContentPage {
		property portal.acceptance = "true";

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Text Fragment Example");

		PageEditorConfiguration.changeConfigText(
			editableText = "Updated fragment text",
			fragmentName = "Text Fragment Example",
			textConfigName = "buttonText");

		PageEditor.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		task ("Assert text is changed") {
			AssertVisible(
				key_content = "Updated fragment text",
				key_fragmentClass = "configuration",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-96685. User can restore and change fragment configuration value."
	@priority = "5"
	test RestoreAndChangeConfigurationFragmentToContentPage {

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Text Fragment Example");

		task ("Change the configuration value in the toolbar") {
			PageEditorConfiguration.changeConfigSelection(
				fragmentName = "Text Fragment Example",
				optionValue = "dark");
		}

		task ("Assert value is changed") {
			AssertVisible(
				key_text = "Title-dark",
				locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
		}

		task ("Retore the configuration value in the toolbar") {
			PageEditorConfiguration.restoreConfigSelectionValue(
				defaultValue = "light",
				fragmentName = "Text Fragment Example");
		}

		task ("Assert default value is displayed") {
			AssertVisible(
				key_text = "Title-light",
				locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
		}

		task ("Publish content page and assert the value selected is displayed") {

			PageEditor.clickPublish();

			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			task ("Assert default value is displayed") {
				AssertVisible(
					key_text = "Title-light",
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

}